#1
# Bug არის პროგრამული შეცდომა, რომელიც იწვევს პროგრამის არასწორ მუშაობას ან არასასურველ შედეგს.
# მაგალითად, თუ პროგრამა უნდა გამოთვალოს ორჯერ ორი და დააბრუნოს 4, მაგრამ ამ დროს აბრუნებს 5-ს, ეს არის bug.

# Debugging არის პროცესი, რომლის დროსაც პროგრამისტი ეძებს და ასწორებს პროგრამაში არსებულ bug-ებს.
# Debugging-ის დროს პროგრამისტი დეტალურად აანალიზებს კოდს, რათა იპოვოს შეცდომის წყარო და გამოასწოროს ის.
# Debugging-ისთვის ხშირად გამოიყენება სპეციალური ინსტრუმენტები, რომლებსაც debugger-ები ეწოდება.

#2
# თექსტური მნიშვნელობები არის მონაცემები, რომლებიც სტრიქონების (strings) სახითაა წარმოდგენილი.
# ეს შეიძლება იყოს ასოების, ციფრების, სიმბოლოებისა და სხვადასხვა ნიშნების კომბინაცია,
# რომლებიც ჩვეულებრივ ტექსტის სახით აისახება. 

# მაგალითად, "გამარჯობა", "12345" ან "Hello, World!" არის თექსტური მნიშვნელობები.
# Python-ში თექსტური მნიშვნელობები ჩვეულებრივ გარშემორტყმულია ორმაგი ("") ან ცალმხრივი ('') ბრჭყალებით.

# თექსტური მნიშვნელობები ხშირად გამოიყენება ისეთი მონაცემების შესანახად, 
# როგორიცაა სახელები, მისამართები, შეტყობინებები და სხვა ტექსტური ინფორმაცია.

#3
# რიცხვითი მნიშვნელობები არის მონაცემები, რომლებიც რიცხვების სახითაა წარმოდგენილი.
# ისინი გამოიყენება მათემატიკური გამოთვლების, საზომების, რაოდენობების და სხვა რიცხვითი ინფორმაციის შესანახად.

# Python-ში რიცხვითი მნიშვნელობები რამდენიმე ტიპად იყოფა:
# 1. Integer (მთელი რიცხვი) - ეს არის მთელი რიცხვები, რომლებიც არ შეიცავს წერტილს ან მარცვლებს.
#    მაგალითად, 5, -10, 1000 არის მთელრიცხვითი მნიშვნელობები.

# 2. Float (მცურავი წერტილით რიცხვი) - ეს არის რიცხვები, რომლებიც შეიცავს წერტილს (დეკიმალურს).
#    მაგალითად, 3.14, -0.5, 2.71828 არის მცურავი წერტილით რიცხვითი მნიშვნელობები.

#4
# კომენტარები ძალიან მნიშვნელოვანია კოდში და მათი გამოყენების რამდენიმე მთავარი მიზეზი არსებობს:

# 1. კოდის ახსნა - კომენტარების მეშვეობით შესაძლებელია კოდის კონკრეტული ნაწილის მიზნისა და ფუნქციონირების ახსნა.
#    ეს ეხმარება სხვა პროგრამისტებს (ან თავად ავტორს, თუ კოდი დიდი ხნის შემდეგ იხილავს) 
#    გაიგონ, თუ რა ფუნქცია აქვს კონკრეტულ კოდს ან როგორ მუშაობს ის.

# 2. კოდის გამარტივება - თუ კოდი რთულია და მრავალი ლოგიკური ნაბიჯი შეიცავს, 
#    კომენტარები მას მარტივად აღსაქმელს ხდის, რაც ამცირებს შეცდომების დაშვების რისკს.

#5
print(10 + 30)
print(20 + 30)
print(60 + 40)

print(50 - 30)
print(40 - 30)
print(60 - 40)

print(50 * 30)
print(40 * 30)
print(60 * 40)

print(50 / 30)
print(40 / 30)
print(60 / 40)

print(50 // 30)
print(40 // 30)
print(60 // 40)

